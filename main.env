#---------------------------------------------------------------------------------------------------------------------
#  Name:        main.env
#  Author:      Randy Johnson
#  Description: This script is the central engine of the Environment Framework. The Environment Framework was written
#               with two principle objectives in mind. 1) Provide a simplified and structured method for managing the
#               Oracle DBA or Developer's Unix shell environmet similar to the standard .profile, but with the
#               addition of error checking, database menu, etc. 2) Contain all the logic needed to do this in one
#               script that is flexible, extensible, enough that it doesn't need to be modified from system to system
#               (no matter where you install the Oracle software or what version you're running). Any site specific
#               changes necessary are made possible through optional configuration files and user defined environment
#               scripts. Configuration files (all uppercase filenames) like PATH, CLASSPATH, LD_LIBRARY_PATH, etc.)
#               contain files/directories you want added to a path like variable such as your PATH. Before a
#               directory/file is added to your environment variable it is checked for Existance and permissions. If
#               the check fails, a warning is printed to the screen letting you know. These warnings can be turned off
#               by unsetting the _WARNINGS_ON_ environment variable (or anything other than 'TRUE' for that matter)
#               in this script. The ALIAS, KSHRC, and BASHRC files are used to generate your aliases, .kshrc, and
#               .bashrc scripts dynamically. Environment files are named *.env by convention, and listed in the
#               envfile.lst file. These are simply shell scripts you want executed when logging in or changing your
#               Oracle environment through the menu. The environment script in the envfile.lst file are sourced in
#               order, top to bottom. This means that there where conflicts exist between two environment files,
#               the last one sourced wins. See the accmpanying user_guide.txt file for more information on the
#               Environment Framework and how to use it to manage your environment and bring sanity to your .profile
#               or .bash_profile.
#  Input Parms: [ORACLE_SID]
#  Return Code: None
#
#  Copyright:   Copyright 1999-2012 Randy Johnson
#               This program is free software: you can redistribute it and/or modify
#               it under the terms of the GNU General Public License as published by
#               the Free Software Foundation, either version 3 of the License, or
#               (at your option) any later version.
#
#               This program is distributed in the hope that it will be useful,
#               but WITHOUT ANY WARRANTY; without even the implied warranty of
#               MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#               GNU General Public License for more details.
#
#               You should have received a copy of the GNU General Public License
#               along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# History - Feel free to delete the history if you like. It is included here for reference.
#---------------------------------------------------------------------------------------------------------------------
# Date         Ver.  Who             Change
# -----------  ----  --------------  ---------------------------------------------------------------------------------
# 10/13/2000   0.1   Randy Johnson   Original write.
# ...
# 06/01/2012   3.8   Randy Johnson   Added PYTHONPATH file handling to configure your PYTHONPATH environment variable.
# 09/12/2012   3.9   Randy Johnson   Added 'menu' alias to display the database menu. It does this by re-sourcing the
#                                    main.env file (this script) and using the current ORACLE_SID. This new alias is
#                                    defined as: alias menu=". $_MAIN_ENV_"
# 11/27/2012   4.0   Randy Johnson   Changed echo to printf for welcome message and version so it automatically
#                                    center justifies on the screen.
# 11/27/2012   4.1   Randy Johnson   Added handling for LD_LIBRARY_PATH handling.
# 06/08/2013   4.2   Randy Johnson   Added special handling for EBIS databases. See...
#                                      ${ORACLE_HOME}/${ORACLE_SID}_${_SHORT_HOSTNAME_}.env
# 06/09/2013   4.3   Randy Johnson   Several changes to the I manage personalization and the location of the
#                                    framework's version of the .bashrc and .kshrc files. As of this release these
#                                    files are tailored in the $_ENV_HOME_ and $_ENV_HOME/{username} directories.
#                                    The system default versions of these files in $HOME directory are updated to
#                                    call the customized versions of these files. This never worked well under the
#                                    previous model.
# 06/19/2013   4.4   Randy Johnson   Minor bug. Added the 'menu' alias to the shell env file (bashrc, kshrc).
# 06/27/2013   4.5   Randy Johnson   Minor changes to the .bashrc and .kshrc script management.
# 06/27/2013   4.6   Randy Johnson   Added filter for -MGMTDB entries in the oratab file (12c GI Beta).
# 09/24/2014   4.7   Randy Johnson   Minor fix for -MGMTDB filter when setting the DEFAULT_SID.
# 03/06/2015   4.8   Randy Johnson   Minor fix for alias ls='ls --color=tty' when bash is the shell. This causes a
#                                      problem for some reason. Even though the ls command is in the $PATH bash choses
#                                      to use the shell built-in ls command which does not support some of the fancy
#                                      options that the Linux /bin/ls command does. The fix is to redefine the alias
#                                      to use the fully qualified ls command, /bin/ls for example, and reconstruct the
#                                      alias. For example "alias ls='/bin/ls --color=tty' replaces
#                                      "alias ls='ls --color=tty". This is activated when SHELL=bash and the ls command
#                                      is aliased and the ls command can be found in the $PATH. Otherwise nothing is
#                                      changed. Look for _LS_ and _LS_PARMS_ below for the code segment.
# 07/29/2015   4.9   Randy Johnson   Finally got so sick of missing /usr/local/bin files and missing /etc/oratab files
#                                    that I wrote in capability for having an ENVFW  copy of the oratab, oraenv and
#                                    dbhome files in the $_MAIN_HOME_ directory. Now if the files are missing, the
#                                    files will be run from $_MAIN_ENV_ instead (if present).
# 10/15/2015   5.0   Randy Johnson   Added for OS X El Capitan [ "`uname -s`" = Darwin ] && export DYLD_LIBRARY_PATH
# 06/14/2016   5.1   Randy Johnson   Added _DGB_LOG_ (Data Guard Broker log file).
# 05/11/2017   5.2   Randy Johnson   Added support for custom oratab to _ENV_HOME_ (and lightly modified oraenv and 
#                                    dbhome (_ENV_HOME_ must now be exported since dbhome is called -- not sourced
#                                    from oraenv).
# --------------------------------------------------------------------------------------------------------------------
_SID_=$1

# Set basic starting variables.
export _ENV_HOME_=$HOME/.env
_FW_VERSION_=5.2
_WARNINGS_ON_='FALSE'               # <--- set to 'TRUE' to enable warning messages

# Cleanup old variables from previous run
unset _ALERT_LOG_
unset _DGB_LOG_
unset _ALIAS_FILE_
unset _BACKGROUND_DUMP_DEST_
unset _CORE_DUMP_DEST_
unset _DB_UNIQUE_NAME_
unset _DEFAULT_ALIAS_FILE_
unset _DEFAULT_RC_CONFIG_FILE_
unset _DEFAULT_SHELLRC_FILE_
unset _SHELLRC_FILE_
unset _DEFAULT_SID_
unset _HOSTIP_
unset _HOSTNAME_
unset _SHORT_HOSTNAME_
unset _INTERACTIVE_
unset _LC_DB_UNIQUE_NAME_
unset _LOCAL_BIN_
unset _MAIN_ENV_
unset _NEWLINE_
unset _ORATAB_
unset _ORA_VERSION_
unset _SYSTEM_TYPE_
unset _TYPE_
unset _USER_DUMP_DEST_
unset _REAL_USERNAME_
unset _EFFECTIVE_USERNAME_
unset _WARNING_

case $- in
   *i*) export _INTERACTIVE_=TRUE  ;;
     *) export _INTERACTIVE_=FALSE ;;
esac

if [ -f "$MAIN_ENV" ]; then
   export _MAIN_ENV_=$MAIN_ENV
else
   export _MAIN_ENV_=${_ENV_HOME_}/main.env
fi

export _SHELL_=`basename $SHELL`
export _LOCAL_BIN_=/usr/local/bin
export _DBMAP_=${_ENV_HOME_}/dbmap
export _HOSTNAME_=`uname -n`
export _SHORT_HOSTNAME_=`uname -n | cut -f1 -d'.'`
export _HOSTIP_=`grep $_HOSTNAME_ /etc/hosts | grep -v ^# | head -1 | awk '{print $1}'`
export _DEFAULT_IFS_="$IFS"
export _SYSTEM_TYPE_=`uname -s`

# --------------------------------------------------------------------
# VERY IMPORTANT!!!
# The next 2 lines go together. Setting IFS to the newline
# character. Wish I knew of a better way to do this.
export _NEWLINE_="
"
# ----------------------------------------
if [ "$_INTERACTIVE_" = TRUE ]; then
   _REAL_USERNAME_=`who am i | head -1 | cut -d' ' -f1`
   _EFFECTIVE_USERNAME_=`whoami | head -1 | cut -d' ' -f1`
   if [ "$_EFFECTIVE_USERNAME_" != "$_REAL_USERNAME_" ]; then
      _PERSONAL_PATH_=${_ENV_HOME_}/\."$_REAL_USERNAME_"
      if [ ! -d "$_PERSONAL_PATH_" ]; then
         unset _PERSONAL_PATH_
      fi
   fi
else
   unset _PERSONAL_PATH_
fi

# Set the oratab file name. First we'll check to see if you have
# a local copy of the oratab file in your framework home (~/.env)
# directory. If not then we will set the location based on the
# system type. For example /var/opt/oracle/oratab for Solaris.
# ------------------------------------------------------------------
if [ -f "$_ENV_HOME_/oratab" ]; then
   _ORATAB_=$_ENV_HOME_/oratab
else
  if [ "$_SYSTEM_TYPE_" = 'SunOS' ]; then
     export _ORATAB_=/var/opt/oracle/oratab
  else
     export _ORATAB_=/etc/oratab
  fi
  if [ ! -f "$_ORATAB_" ]; then
     [ -n "$_WARNING_" ] && _WARNING_="$_WARNING_\n\n"
     _WARNING_="$_WARNING_"" Oratab file not found: $_ORATAB_"
  fi
fi

# Special handling for adding $HOME/dba/bin to the front of your path.
# ------------------------------------------------------------------
IFS=':'
if [ -d "$HOME/dba/bin" ]; then
   for _DIR_ in $PATH ; do
      if [ "$_LINE_" = "$_DIR_" ]; then
         _FOUND_=TRUE
      fi
   done
   if [ "$_FOUND_" != TRUE ]; then
      IFS="$_DEFAULT_IFS_"
      export PATH=`echo $HOME/dba/bin:${PATH}|sed -e "s/:\.//g"`:.
      IFS=':'
   fi
   unset _FOUND_
fi
IFS="$_DEFAULT_IFS_"

# Add /usr/local/bin to the PATH
# ------------------------------------------------------------------
[ -n "$PATH" ] && export PATH=`echo ${PATH}|sed -e "s/:\.//g"`:.
if [ `echo ${PATH} | grep -c "$_LOCAL_BIN_"` -eq 0 ]; then
   export PATH="${PATH}:${_LOCAL_BIN_}:."
fi

# Set the Oracle Environment
# ------------------------------------------------------------------
export TMP=/tmp
export TEMP=/tmp
export TMPDIR=/tmp
export ORACLE_TEMP=/tmp

if [ -f "$_ORATAB_" ]; then
   # Parse the oratab file to find all instances defined on this
   # system. Your ORACLE_SID ($_DEFAULT_SID_) will be set to the first
   # one found in the oratab file unless you pass one in when calling
   # this script ($_SID_ is set to the first parameter passed in
   # when calling this script).
   # ------------------------------------------------------------------
   _DEFAULT_SID_=`grep -v "^#" $_ORATAB_ | grep -v "^-MGMTDB" | grep -v "^$" | grep -v "^\*" | head -1 | awk -F: '{print $1}'`
   _SID_LIST_=`grep -v "^#" $_ORATAB_ | grep -v "^-MGMTDB" | grep -v "^$" | grep -v "^\*" | awk -F: '{print $1}' | sort`

   if [ -n "$_SID_" ]; then
      export ORACLE_SID=$_SID_
   else
      # IF $ORACLE_SID is not set then use the default SID
      # ------------------------------------------------------------------
      if [ -z "$ORACLE_SID" ]; then
         export ORACLE_SID=$_DEFAULT_SID_
      fi
   fi

   # Find the database unique name using the DBMAP map file
   # (ORACLE_SID : DB_UNIQUE_NAME) This is needed because some of the
   # directories in the Oracle environment use both the ORACLE_SID and
   # the DB_UNIQUE_NAME. The Framework will work without it but some
   # of the conveniences will not work without it. Usually you only
   # need the dbmap file if it is a RAC database but also applies to
   # Data Guard (primary & standby) configs.
   # ------------------------------------------------------------------
   if [ -f "$_DBMAP_" ]; then
      export _DB_UNIQUE_NAME_=`grep -v ^$ $_DBMAP_ | grep -v ^# | grep ^$ORACLE_SID | cut -f2 -d: | \
       sed 's/^[ \t]*//;s/[ \t]*$//' | sort -u`
   fi
   # This logic to accomodate environments where
   # the db_unique_name != ORACLE_SID
   # ------------------------------------------
   if [ -z "$_DB_UNIQUE_NAME_" ]; then
      export _DB_UNIQUE_NAME_=$ORACLE_SID
   fi
   export _LC_DB_UNIQUE_NAME_=`echo $_DB_UNIQUE_NAME_ | tr [:upper:] [:lower:]`

   if [ "$_DB_UNIQUE_NAME_" = '+ASM' ]; then
      _TYPE_=asm
   else
      _TYPE_=rdbms
   fi

   # Uncomment the following logic if you want to anchor the TNSADMIN directory
   # to the first ORACLE_HOME in the oratab file.
   # ---------------------------------------------------------------------------
   ###~ _TNSADMIN_=`grep -v "^#" $_ORATAB_ | grep -v "^$" | grep -v "^\*" | head -1 | awk -F: '{print $2}'`/network/admin
   ###~ if [ -n "$_TNSADMIN_" -a -d "$_TNSADMIN_" ]; then
   ###~    export TNS_ADMIN=$_TNSADMIN_
   ###~    unset _TNSADMIN_
   ###~ fi

   # Determine database version
   # -----------------------------
   _LINE_=`grep -v "^#" $_ORATAB_ | grep -v "^$" | grep -v "^\*" | grep ^$ORACLE_SID:`
   if [ -z "$_LINE_" ]; then
      [ -n "$_WARNING_" ] && _WARNING_="$_WARNING_\n\n"
      _WARNING_="$_WARNING_"" ORACLE_SID not found in oratab. Cannot determine \$ORACLE_HOME. Database environment not set."
   else
      unset _ORAENV_
      if [ -f "$_LOCAL_BIN_/oraenv" -a -f "$_LOCAL_BIN_/dbhome" ]; then
         _ORAENV_=$_LOCAL_BIN_/oraenv
      else
         if [ -f "$_ENV_HOME_/oraenv" -a -f "$_ENV_HOME_/dbhome" ]; then
            _ORAENV_=$_ENV_HOME_/oraenv
         fi
      fi

      if [ -n "_ORAENV_" ]; then
         if [ -n "$ORAENV_ASK" ]; then
            _OASK_=$ORAENV_ASK
            export ORAENV_ASK=NO
            . $_ORAENV_ > /dev/null
            export ORAENV_ASK=$_OASK_
         else
            export ORAENV_ASK=NO
            . $_ORAENV_ >/dev/null
            unset ORAENV_ASK
         fi
         unset _ORAENV_
      else
         [ -n "$_WARNING_" ] && _WARNING_="$_WARNING_\n\n"
         _WARNING_="$_WARNING_"" oraev/dbhome not found."
      fi
      
      # For Apple OS X only.
      # ---------------------
      [ "`uname -s`" = Darwin ] && export DYLD_LIBRARY_PATH=$ORACLE_HOME:$ORACLE_HOME/lib:$ORACLE_HOME/rdbms/lib

      export _ORA_VERSION_=`$ORACLE_HOME/bin/sqlplus -V 2>/dev/null | grep Release | cut -d' ' -f3 | cut -d\. -f1`

      if [ -z "$_ORA_VERSION_" ]; then
         # If version unknown then assume 11.x
         # -------------------------------------
         export _ORA_VERSION_=11
         [ -n "$_WARNING_" ] && _WARNING_="$_WARNING_\n\n"
         _WARNING_="$_WARNING_"" Cannot determine Oracle version. Defaulting to: $_ORA_VERSION_"
      fi

      if [ "$_ORA_VERSION_" -ge 11 ]; then
         export _BACKGROUND_DUMP_DEST_=${ORACLE_BASE}/diag/${_TYPE_}/${_LC_DB_UNIQUE_NAME_}/${ORACLE_SID}/trace
         export _USER_DUMP_DEST_=$_BACKGROUND_DUMP_DEST_
         export _CORE_DUMP_DEST_=${ORACLE_BASE}/diag/${_TYPE_}/${_LC_DB_UNIQUE_NAME_}/${ORACLE_SID}/cdump
         export _ALERT_LOG_=${_BACKGROUND_DUMP_DEST_}/alert_${ORACLE_SID}.log
         export _DGB_LOG_=${_BACKGROUND_DUMP_DEST_}/drc${ORACLE_SID}.log
      else
         export _BACKGROUND_DUMP_DEST_=${ORACLE_BASE}/admin/${_DB_UNIQUE_NAME_}/bdump
         export _USER_DUMP_DEST_=${ORACLE_BASE}/admin/${_DB_UNIQUE_NAME_}/udump
         export _CORE_DUMP_DEST_=${ORACLE_BASE}/admin/${_DB_UNIQUE_NAME_}/cdump
         export _ALERT_LOG_=${ORACLE_BASE}/admin/${_DB_UNIQUE_NAME_}/bdump/alert_${ORACLE_SID}.log
         export _DGB_LOG_=${ORACLE_BASE}/admin/${_DB_UNIQUE_NAME_}/bdump/drc${ORACLE_SID}.log
      fi

      # In earlier versions of Oracle RDBMS it was important to set the ORA_NLSnn
      # environment variable. This is no longer the case. See MOS note 77442.1.
      unset ORA_NLS32 ORA_NLS33 ORA_NLS10
      case $_ORA_VERSION_ in
         7) [ -d "$ORACLE_HOME/ocommon/nls/admin/data" ] && export ORA_NLS32=$ORACLE_HOME/ocommon/nls/admin/data
            ;;
         8) [ -d "$ORACLE_HOME/ocommon/nls/admin/data" ] && export ORA_NLS33=$ORACLE_HOME/ocommon/nls/admin/data
            ;;
         9) [ -d "$ORACLE_HOME/ocommon/nls/admin/data" ] && export ORA_NLS33=$ORACLE_HOME/ocommon/nls/admin/data
            ;;
        10) [ -d "$ORACLE_HOME/nls/data" ]               && export ORA_NLS10=$ORACLE_HOME/nls/data
            ;;
        11) [ -d "$ORACLE_HOME/nls/data" ]               && export ORA_NLS10=$ORACLE_HOME/nls/data
            ;;
      esac
   fi

   # Set other common Oracle variables.
   # -----------------------------------
   export ORACLE_LPPROG=/bin/lpr
   export ORACLE_LPARGS="-d"
   export ORACLE_LPSTAT=/bin/lpq
   export ORACLE_PAGER=/bin/more
   export ORACLE_TERM=vt100
   export ORA_CSM_MODE=line
   if [ -n "$ORACLE_BASE" ]; then
      ORACLE_DOC=${ORACLE_BASE}/doc
   fi
else
   [ -n "$_WARNING_" ] && _WARNING_="$_WARNING_\n\n"
   _WARNING_="$_WARNING_"" Database environment not set."
fi

# Set SQLPATH if not already set for SQL*Plus personalization.
# -------------------------------------------------------------
if [ -d "$_PERSONAL_PATH_" -a -f "${_PERSONAL_PATH_}/login.sql" ]; then
   export SQLPATH=$_PERSONAL_PATH_
elif [ -f "${_ENV_HOME_}/login.sql" ]; then
   export SQLPATH=${_ENV_HOME_}
else
   unset SQLPATH
fi

# Call in all user customizable environment files. Add all files you want to
# source into your environment into the $_ENVFILE_LIST file. They will be
# sourced in the order that they appear.
# ----------------------------------------------------------------------------
if [ -d "$_PERSONAL_PATH_" -a -f "${_PERSONAL_PATH_}/envfile.list" ]; then
   for _LINE_ in `egrep -v  '^#|^$' ${_PERSONAL_PATH_}/envfile.list`; do
      if [ -f "${_PERSONAL_PATH_}/$_LINE_" ]; then
         . ${_PERSONAL_PATH_}/$_LINE_
      else
         echo "Environment file not found: ${_PERSONAL_PATH_}/$_LINE_"
      fi
   done
elif [ -f ${_ENV_HOME_}/envfile.list ]; then
   for _LINE_ in `egrep -v '^#|^$' ${_ENV_HOME_}/envfile.list`; do
      if [ -f ${_ENV_HOME_}/$_LINE_ ]; then
         . ${_ENV_HOME_}/$_LINE_
      else
         echo "Environment file not found: ${_ENV_HOME_}/$_LINE_"
      fi
   done
fi

# Set your ORACLE_PATH. Put everything you want to add to your ORACLE_PATH
# in the _ORACLE_PATH_FILE_ file located in the $_ENV_HOME_ or _PERSONAL_PATH
# directory.
# ----------------------------------------------------------------------------
unset ORACLE_PATH
unset _ORACLE_PATH_FILE_
unset _FOUND_

if [ -n "$_PERSONAL_PATH_" -a -f "${_PERSONAL_PATH_}/ORACLE_PATH" ]; then
   _ORACLE_PATH_FILE_=${_PERSONAL_PATH_}/ORACLE_PATH
elif [ -f ${_ENV_HOME_}/ORACLE_PATH ]; then
   _ORACLE_PATH_FILE_=${_ENV_HOME_}/ORACLE_PATH
fi

if [ -n "$_ORACLE_PATH_FILE_" ]; then
   for _LINE_ in `egrep -v  '^#|^$' $_ORACLE_PATH_FILE_`; do
      if [ -n "$_LINE_" ]; then
         _LINE_=`eval echo "$_LINE_"`
         if [ -d "$_LINE_" -o -r "$_LINE_" ]; then
            IFS=':'
            for _DIR_ in $ORACLE_PATH ; do
               if [ "$_LINE_" = "$_DIR_" ]; then
                  _FOUND_=TRUE
               fi
            done
            IFS="$_DEFAULT_IFS_"
            if [ "$_FOUND_" != TRUE ]; then
               if [ -z "$ORACLE_PATH" ]; then
                  ORACLE_PATH=$_LINE_
               else
                  ORACLE_PATH=${ORACLE_PATH}:$_LINE_
               fi
            fi
         else
            [ -n "$_WARNING_" ] && _WARNING_="$_WARNING_\n\n"
            _WARNING_="$_WARNING_"" Inaccessible path specified for ORACLE_PATH."
            _WARNING_="$_WARNING_""\n  Remedy:"
            _WARNING_="$_WARNING_""\n    Remove the invalid path from the ORACLE_PATH file or ensure the directory"
            _WARNING_="$_WARNING_""\n    exists *and* that you have sufficient permissions on it's parent directories."
            _WARNING_="$_WARNING_""\n    ORACLE_PATH file: $_ORACLE_PATH_FILE_"
            _WARNING_="$_WARNING_""\n    ORACLE_PATH Spec: $_LINE_"
         fi
      fi
      unset _FOUND_
   done
   unset _FOUND_
   if [ -n "$ORACLE_PATH" ]; then
      export ORACLE_PATH=`echo $ORACLE_PATH | sed -e "s/^://g"`
   else
      unset ORACLE_PATH
   fi
fi

# Set your CLASSPATH. Put everything you want to add to your CLASSPATH
# in the _CLASS_PATH_FILE_ file located in the $_ENV_HOME_ directory.
# ----------------------------------------------------------------------------
unset CLASSPATH
unset _CLASSPATH_FILE_
unset _FOUND_

if [ -n "$_PERSONAL_PATH_" -a -f "${_PERSONAL_PATH_}/CLASSPATH" ]; then
   _CLASSPATH_FILE_=${_PERSONAL_PATH_}/CLASSPATH
elif [ -f ${_ENV_HOME_}/CLASSPATH ]; then
   _CLASSPATH_FILE_=${_ENV_HOME_}/CLASSPATH
fi

if [ -n "$_CLASSPATH_FILE_" ]; then
   for _LINE_ in `egrep -v  '^#|^$' $_CLASSPATH_FILE_`; do
      if [ -n "$_LINE_" ]; then
         _LINE_=`eval echo "$_LINE_"`
         if [ -d "$_LINE_" -o -r "$_LINE_" ]; then
            IFS=':'
            for _DIR_ in $CLASSPATH ; do
               if [ "$_LINE_" = "$_DIR_" ]; then
                  _FOUND_=TRUE
               fi
            done
            IFS="$_DEFAULT_IFS_"
            if [ "$_FOUND_" != TRUE ]; then
               if [ -z "$CLASSPATH" ]; then
                  CLASSPATH=$_LINE_
               else
                  CLASSPATH=${CLASSPATH}:$_LINE_
               fi
            fi
         else
            [ -n "$_WARNING_" ] && _WARNING_="$_WARNING_\n\n"
            _WARNING_="$_WARNING_"" Inaccessible path specified for CLASSPATH."
            _WARNING_="$_WARNING_""\n  Remedy:"
            _WARNING_="$_WARNING_""\n    Remove the invalid path from the CLASSPATH file or ensure the directory"
            _WARNING_="$_WARNING_""\n    exists *and* that you have sufficient permissions on it's parent directories."
            _WARNING_="$_WARNING_""\n    CLASSPATH file: $_CLASSPATH_FILE_"
            _WARNING_="$_WARNING_""\n    CLASSPATH Spec: $_LINE_"
         fi
      fi
      unset _FOUND_
   done
   unset _FOUND_
   if [ -n "$CLASSPATH" ]; then
      export CLASSPATH=`echo $CLASSPATH | sed -e "s/^://g"`
   else
      unset CLASSPATH
   fi
fi

# Set your LIBPATH. Put everything you want to add to your LIBPATH
# in the _LIBPATH_FILE_file located in the $_ENV_HOME_directory.
# ----------------------------------------------------------------------------
unset LIBPATH
unset _LIBPATH_FILE_
unset _FOUND_

if [ -n "$_PERSONAL_PATH_" -a -f "${_PERSONAL_PATH_}/LIBPATH" ]; then
   _LIBPATH_FILE_=${_PERSONAL_PATH_}/LIBPATH
elif [ -f ${_ENV_HOME_}/LIBPATH ]; then
   _LIBPATH_FILE_=${_ENV_HOME_}/LIBPATH
fi

if [ -n "$_LIBPATH_FILE_" ]; then
   for _LINE_ in `egrep -v  '^#|^$' $_LIBPATH_FILE_`; do
      if [ -n "$_LINE_" ]; then
         _LINE_=`eval echo $_LINE_`
         if [ -d "$_LINE_" ]; then
            IFS=':'
            for _DIR_ in $LIBPATH ; do
               if [ "$_LINE_" = "$_DIR_" ]; then
                  _FOUND_=TRUE
               fi
            done
            IFS="$_DEFAULT_IFS_"
            if [ "$_FOUND_" != TRUE ]; then
               if [ -z "$LIBPATH" ]; then
                  LIBPATH=$_LINE_
               else
                  LIBPATH=${LIBPATH}:$_LINE_
               fi
            fi
         else
            [ -n "$_WARNING_" ] && _WARNING_="$_WARNING_\n\n"
            _WARNING_="$_WARNING_"" Inaccessible path specified for LIBPATH."
            _WARNING_="$_WARNING_""\n  Remedy:"
            _WARNING_="$_WARNING_""\n    Remove the invalid path from the LIBPATH file or ensure the directory"
            _WARNING_="$_WARNING_""\n    exists *and* that you have sufficient permissions on it's parent directories."
            _WARNING_="$_WARNING_""\n    LIBPATH file: $_LIBPATH_FILE_"
            _WARNING_="$_WARNING_""\n    LIBPATH Spec: $_LINE_"
         fi
      fi
      unset _FOUND_
   done
   unset _FOUND_
   if [ -n "$LIBPATH" ]; then
      export LIBPATH=`echo $LIBPATH | sed -e "s/^://g"`
   else
      unset LIBPATH
   fi
fi

# Set your LD_LIBRARY_PATH. Put everything you want to add to your LD_LIBRARY_PATH
# in the _LD_LIBRARY_PATH_FILE_ file located in the $_ENV_HOME_directory.
# Default is: $ORACLE_HOME/lib32:/usr/lib or $ORACLE_HOME/lib:/usr/lib
# -----------------------------------------------------------------------------------
unset LD_LIBRARY_PATH
unset _LD_LIBRARY_PATH_FILE_
unset _FOUND_

if [ -n "$_PERSONAL_PATH_" -a -f "${_PERSONAL_PATH_}/LD_LIBRARY_PATH" ]; then
   _LD_LIBRARY_PATH_FILE_=${_PERSONAL_PATH_}/LD_LIBRARY_PATH
elif [ -f ${_ENV_HOME_}/LD_LIBRARY_PATH ]; then
   _LD_LIBRARY_PATH_FILE_=${_ENV_HOME_}/LD_LIBRARY_PATH
fi

if [ -n "$_LD_LIBRARY_PATH_FILE_" ]; then
   for _LINE_ in `egrep -v  '^#|^$' $_LD_LIBRARY_PATH_FILE_`; do

      if [ -n "$_LINE_" ]; then
         _LINE_=`eval echo $_LINE_`
         if [ -d "$_LINE_" ]; then
            IFS=':'
            for _DIR_ in $LD_LIBRARY_PATH ; do
               if [ "$_LINE_" = "$_DIR_" ]; then
                  _FOUND_=TRUE
               fi
            done
            IFS="$_DEFAULT_IFS_"
            if [ "$_FOUND_" != TRUE ]; then
               if [ -z "$LD_LIBRARY_PATH" ]; then
                  LD_LIBRARY_PATH=$_LINE_
               else
                  LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$_LINE_
               fi
            fi
         else
            [ -n "$_WARNING_" ] && _WARNING_="$_WARNING_\n\n"
            _WARNING_="$_WARNING_"" Inaccessible path specified for LD_LIBRARY_PATH."
            _WARNING_="$_WARNING_""\n  Remedy:"
            _WARNING_="$_WARNING_""\n    Remove the invalid path from the LD_LIBRARY_PATH file or ensure the directory"
            _WARNING_="$_WARNING_""\n    exists *and* that you have sufficient permissions on it's parent directories."
            _WARNING_="$_WARNING_""\n    LD_LIBRARY_PATH file: $_LD_LIBRARY_PATH_FILE_"
            _WARNING_="$_WARNING_""\n    LD_LIBRARY_PATH Spec: $_LINE_"
         fi
      fi
      unset _FOUND_
   done
   unset _FOUND_
   if [ -n "$LD_LIBRARY_PATH" ]; then
      export LD_LIBRARY_PATH=`echo $LD_LIBRARY_PATH | sed -e "s/^://g"`
   else
      unset LD_LIBRARY_PATH
   fi
fi

# Set your LD_LIBRARY_PATH_64. Put everything you want to add to your LD_LIBRARY_PATH_64
# in the _LD_LIBRARY_PATH_64_ file located in the $_ENV_HOME_directory.
# ----------------------------------------------------------------------------------------
unset LD_LIBRARY_PATH_64
unset _LD_LIBRARY_PATH_64_FILE_
unset _FOUND_

if [ -n "$_PERSONAL_PATH_" -a -f "${_PERSONAL_PATH_}/LD_LIBRARY_PATH_64" ]; then
   _LD_LIBRARY_PATH_64_FILE_=${_PERSONAL_PATH_}/LD_LIBRARY_PATH_64
elif [ -f ${_ENV_HOME_}/LD_LIBRARY_PATH_64 ]; then
   _LD_LIBRARY_PATH_64_FILE_=${_ENV_HOME_}/LD_LIBRARY_PATH_64
fi

if [ -n "$_LD_LIBRARY_PATH_64_FILE_" ]; then
   for _LINE_ in `egrep -v  '^#|^$' $_LD_LIBRARY_PATH_64_FILE_`; do
      if [ -n "$_LINE_" ]; then
         _LINE_=`eval echo $_LINE_`
         if [ -d "$_LINE_" ]; then
            IFS=':'
            for _DIR_ in $LD_LIBRARY_PATH_64 ; do
               if [ "$_LINE_" = "$_DIR_" ]; then
                  _FOUND_=TRUE
               fi
            done
            IFS="$_DEFAULT_IFS_"
            if [ "$_FOUND_" != TRUE ]; then
               if [ -z "$LD_LIBRARY_PATH_64" ]; then
                  LD_LIBRARY_PATH_64=$_LINE_
               else
                  LD_LIBRARY_PATH_64=${LD_LIBRARY_PATH_64}:$_LINE_
               fi
            fi
         else
            [ -n "$_WARNING_" ] && _WARNING_="$_WARNING_\n\n"
            _WARNING_="$_WARNING_"" Inaccessible path specified for LD_LIBRARY_PATH_64."
            _WARNING_="$_WARNING_""\n  Remedy:"
            _WARNING_="$_WARNING_""\n    Remove the invalid path from the LD_LIBRARY_PATH_64 file or ensure the directory"
            _WARNING_="$_WARNING_""\n    exists *and* that you have sufficient permissions on it's parent directories."
            _WARNING_="$_WARNING_""\n    LD_LIBRARY_PATH_64 file: $_LD_LIBRARY_PATH_64_FILE_"
            _WARNING_="$_WARNING_""\n    LD_LIBRARY_PATH_64 Spec: $_LINE_"
         fi
      fi
      unset _FOUND_
   done
   unset _FOUND_
   if [ -n "$LD_LIBRARY_PATH_64" ]; then
      export LD_LIBRARY_PATH_64=`echo $LD_LIBRARY_PATH_64 | sed -e "s/^://g"`
   else
      unset LD_LIBRARY_PATH_64
   fi
fi

# Add directories to your MANPATH. Put everything you want to add to your
# MANPATH in the _MANPATH_FILE_ file (one path per line).
# ----------------------------------------------------------------------------
unset MANPATH
unset _MANPATH_FILE_
_FOUND_=FALSE

if [ -n "$_PERSONAL_PATH_" -a -f "${_PERSONAL_PATH_}/MANPATH" ]; then
   _MANPATH_FILE_=${_PERSONAL_PATH_}/MANPATH
elif [ -f ${_ENV_HOME_}/MANPATH ]; then
   _MANPATH_FILE_=${_ENV_HOME_}/MANPATH
fi

if [ -n "$_MANPATH_FILE_" ]; then
   for _LINE_ in `egrep -v  '^#|^$' $_MANPATH_FILE_`; do
      if [ -n "$_LINE_" ]; then
         _LINE_=`eval echo $_LINE_`
         if [ -d "$_LINE_" -o -r "$_LINE_" ]; then
            IFS=':'
            for _DIR_ in $MANPATH ; do
               if [ "$_LINE_" = "$_DIR_" ]; then
                  _FOUND_=TRUE
               fi
            done
            IFS="$_DEFAULT_IFS_"
            if [ "$_FOUND_" != TRUE ]; then
               if [ -z "$MANPATH" ]; then
                  MANPATH=$_LINE_
               else
                  MANPATH=${MANPATH}:$_LINE_
               fi
            fi
         else
            [ -n "$_WARNING_" ] && _WARNING_="$_WARNING_\n\n"
            _WARNING_="$_WARNING_"" Inaccessible path specified for MANPATH."
            _WARNING_="$_WARNING_""\n  Remedy:"
            _WARNING_="$_WARNING_""\n    Remove the invalid path from the MANPATH file or ensure the directory"
            _WARNING_="$_WARNING_""\n    exists *and* that you have sufficient permissions on it's parent directories."
            _WARNING_="$_WARNING_""\n    MANPATH file: $_MANPATH_FILE_"
            _WARNING_="$_WARNING_""\n    MANPATH Spec: $_LINE_"
         fi
      fi
      unset _FOUND_
   done
   unset _FOUND_
   if [ -n "$MANPATH" ]; then
      export MANPATH=`echo $MANPATH | sed "s/^://g"`
   else
      unset MANPATH
   fi
fi

# Add directories to your PATH. Put everything you want to add to your PATH
# in the _PATH_FILE_ file (one path per line).
# ----------------------------------------------------------------------------
unset _PATH_FILE_
_FOUND_=FALSE

if [ -n "$_PERSONAL_PATH_" -a -f "${_PERSONAL_PATH_}/PATH" ]; then
   _PATH_FILE_=${_PERSONAL_PATH_}/PATH
elif [ -f ${_ENV_HOME_}/PATH ]; then
   _PATH_FILE_=${_ENV_HOME_}/PATH
fi

if [ -n "$_PATH_FILE_" ]; then
   for _LINE_ in `egrep -v  '^#|^$' $_PATH_FILE_`; do
      if [ -n "$_LINE_" ]; then
         _LINE_=`eval echo $_LINE_`
         if [ -d "$_LINE_" ]; then
            IFS=':'
            for _DIR_ in $PATH ; do
               if [ "$_LINE_" = "$_DIR_" ]; then
                  _FOUND_=TRUE
               fi
            done
            IFS="$_DEFAULT_IFS_"
            if [ ! "$_FOUND_" = TRUE ]; then
               if [ -z "$PATH" ]; then
                  PATH=$_LINE_
               else
                  PATH=$PATH:$_LINE_
               fi
            fi
         else
            [ -n "$_WARNING_" ] && _WARNING_="$_WARNING_\n\n"
            _WARNING_="$_WARNING_"" Inaccessible path specified for PATH."
            _WARNING_="$_WARNING_""\n  Remedy:"
            _WARNING_="$_WARNING_""\n    Remove the invalid path from the PATH file or ensure the directory"
            _WARNING_="$_WARNING_""\n    exists *and* that you have sufficient permissions on it's parent directories."
            _WARNING_="$_WARNING_""\n    PATH file: $_PATH_FILE_"
            _WARNING_="$_WARNING_""\n    PATH Spec: $_LINE_"
         fi
      fi
      unset _FOUND_
   done
   unset _FOUND_
   if [ -n "$PATH" ]; then
      export PATH=`echo $PATH | sed -e "s/:\.//g"`:\.
   else
      unset PATH
   fi
fi

# Add directories to your PYTHONPATH. Put everything you want to add to your
# PYTHONPATH in the _PYTHONPATH_FILE_ file (one path per line).
# ----------------------------------------------------------------------------
unset PYTHONPATH
unset _PYTHONPATH_FILE_
_FOUND_=FALSE

if [ -n "$_PERSONAL_PATH_" -a -f "${_PERSONAL_PATH_}/PYTHONPATH" ]; then
   _PYTHONPATH_FILE_=${_PERSONAL_PATH_}/PYTHONPATH
elif [ -f ${_ENV_HOME_}/PYTHONPATH ]; then
   _PYTHONPATH_FILE_=${_ENV_HOME_}/PYTHONPATH
fi

if [ -n "$_PYTHONPATH_FILE_" ]; then
   for _LINE_ in `egrep -v  '^#|^$' $_PYTHONPATH_FILE_`; do
      if [ -n "$_LINE_" ]; then
         _LINE_=`eval echo $_LINE_`
         if [ -d "$_LINE_" -o -r "$_LINE_" ]; then
            IFS=':'
            for _DIR_ in $PYTHONPATH ; do
               if [ "$_LINE_" = "$_DIR_" ]; then
                  _FOUND_=TRUE
               fi
            done
            IFS="$_DEFAULT_IFS_"
            if [ "$_FOUND_" != TRUE ]; then
               if [ -z "$PYTHONPATH" ]; then
                  PYTHONPATH=$_LINE_
               else
                  PYTHONPATH=${PYTHONPATH}:$_LINE_
               fi
            fi
         else
            [ -n "$_WARNING_" ] && _WARNING_="$_WARNING_\n\n"
            _WARNING_="$_WARNING_"" Inaccessible path specified for PYTHONPATH."
            _WARNING_="$_WARNING_""\n  Remedy:"
            _WARNING_="$_WARNING_""\n    Remove the invalid path from the PYTHONPATH file or ensure the directory"
            _WARNING_="$_WARNING_""\n    exists *and* that you have sufficient permissions on it's parent directories."
            _WARNING_="$_WARNING_""\n    PYTHONPATH file: $_PYTHONPATH_FILE_"
            _WARNING_="$_WARNING_""\n    PYTHONPATH Spec: $_LINE_"
         fi
      fi
      unset _FOUND_
   done
   unset _FOUND_
   if [ -n "$PYTHONPATH" ]; then
      export PYTHONPATH=`echo $PYTHONPATH | sed "s/^://g"` || unset PYTHONPATH
   else
      unset PYTHONPATH
   fi
fi

# Add directories to your PERL5LIB. Put everything you want to add to your
# PERL5LIB in the _PERL5LIB_FILE_ file (one path per line).
# ----------------------------------------------------------------------------
unset PERL5LIB
unset _PERL5LIB_FILE_
_FOUND_=FALSE

if [ -n "$_PERSONAL_PATH_" -a -f "${_PERSONAL_PATH_}/PERL5LIB" ]; then
   _PERL5LIB_FILE_=${_PERSONAL_PATH_}/PERL5LIB
elif [ -f ${_ENV_HOME_}/PERL5LIB ]; then
   _PERL5LIB_FILE_=${_ENV_HOME_}/PERL5LIB
fi

if [ -n "$_PERL5LIB_FILE_" ]; then
   for _LINE_ in `egrep -v  '^#|^$' $_PERL5LIB_FILE_`; do
      if [ -n "$_LINE_" ]; then
         _LINE_=`eval echo $_LINE_`
         if [ -d "$_LINE_" -o -r "$_LINE_" ]; then
            IFS=':'
            for _DIR_ in $PERL5LIB ; do
               if [ "$_LINE_" = "$_DIR_" ]; then
                  _FOUND_=TRUE
               fi
            done
            IFS="$_DEFAULT_IFS_"
            if [ "$_FOUND_" != TRUE ]; then
               if [ -z "$PERL5LIB" ]; then
                  PERL5LIB=$_LINE_
               else
                  PERL5LIB=${PERL5LIB}:$_LINE_
               fi
            fi
         else
            [ -n "$_WARNING_" ] && _WARNING_="$_WARNING_\n\n"
            _WARNING_="$_WARNING_"" Inaccessible path specified for PERL5LIB."
            _WARNING_="$_WARNING_""\n  Remedy:"
            _WARNING_="$_WARNING_""\n    Remove the invalid path from the PERL5LIB file or ensure the directory"
            _WARNING_="$_WARNING_""\n    exists *and* that you have sufficient permissions on it's parent directories."
            _WARNING_="$_WARNING_""\n    PERL5LIB file: $_PERL5LIB_FILE_"
            _WARNING_="$_WARNING_""\n    PERL5LIB Spec: $_LINE_"
         fi
      fi
      unset _FOUND_
   done
   unset _FOUND_
   if [ -n "$PERL5LIB" ]; then
      export PERL5LIB=`echo $PERL5LIB | sed "s/^://g"` || unset PERL5LIB
   else
      unset PERL5LIB
   fi
fi

# Default file locations for .kshrc, .bashrc, ALIAS, BASHRC, and KSHRC
# ---------------------------------------------------------------------------
if [ "$_SHELL_" = bash ]; then
   _RC_CONFIG_FILE_=BASHRC
   _SHELLRC_FILE_='.bashrc'
   # -------------------------------------------------------------------
   # The following is for special case where the ls command is aliased
   # and the shell is bash.
   # -------------------------------------------------------------------
   alias ls > /dev/null 2>&1
   _RC_=$?
   if [ "$_RC_" -eq 0 ]; then
      _LS_=`alias ls  | awk -F"'" {' print $2 '} | awk {' print $1 '}`
      _LS_PARMS_=`alias ls  | awk -F"'" {' print $2 '} | awk {' print $2 '}`
      if [ "$_LS_" = ls ]; then
         if [ -n "$_LS_PARMS_" ]; then
            unalias $_LS_
            _LS_=`which ls`
            alias ls="$_LS_ $_LS_PARMS_"
            unset _LS_ _LS_PARMS_
         fi
      fi
   fi
   # -------------------------------------------------------------------
else
  # if not bash then assume korn
   _RC_CONFIG_FILE_=KSHRC
   _SHELLRC_FILE_='.kshrc'
fi
_DEFAULT_RC_CONFIG_FILE_=${_ENV_HOME_}/${_RC_CONFIG_FILE_}
_DEFAULT_SHELLRC_FILE_=${HOME}/${_SHELLRC_FILE_}

_ALIAS_FILE_=ALIAS
_DEFAULT_ALIAS_FILE_=${_ENV_HOME_}/${_ALIAS_FILE_}

if [ -n "$_PERSONAL_PATH_" -a -d "$_PERSONAL_PATH_" ]; then
   export _SHELLRC_FILE_=${_PERSONAL_PATH_}/${_SHELLRC_FILE_}
else
  export _SHELLRC_FILE_=${_ENV_HOME_}/${_SHELLRC_FILE_}
fi

# Create a list of personal directories found in framework home (_ENV_HOME_)
# ---------------------------------------------------------------------------
typeset -a _PERSONAL_DIR_LIST_
typeset -i _COUNT_=0

_PERSONAL_PATH_CANDIDATES_=`ls -d ${_ENV_HOME_}/.[^.]*`
if [ -n "$_PERSONAL_PATH_CANDIDATES_" ]; then
   for _LINE_ in `echo "$_PERSONAL_PATH_CANDIDATES_"`; do
      if [ -n "$_LINE_" ]; then
         _LINE_=`eval echo $_LINE_`
         if [ -d "$_LINE_" ]; then
            _PERSONAL_DIR_LIST_[$_COUNT_]=$_LINE_
            _COUNT_=$_COUNT_+1
         fi
      fi
   done
fi

# Set shell alias definitions
# ----------------------------------------------------------------------------
if [ -d "$_PERSONAL_PATH_" -a -f "${_PERSONAL_PATH_}/${_RC_CONFIG_FILE_}" ]; then
   _RC_CONFIG_FILE_=${_PERSONAL_PATH_}/${_RC_CONFIG_FILE_}
else
   _RC_CONFIG_FILE_=$_DEFAULT_RC_CONFIG_FILE_
fi

if [ -d "$_PERSONAL_PATH_" -a -f "${_PERSONAL_PATH_}/${_ALIAS_FILE_}" ]; then
   _ALIAS_FILE_=${_PERSONAL_PATH_}/${_ALIAS_FILE_}
else
   _ALIAS_FILE_=$_DEFAULT_ALIAS_FILE_
fi

# This adds code to the ~/.bashrc and ~/.kshrc scripts.
# -------------------------------------------------------
if [ `grep -c 'if \[ -f "$_SHELLRC_FILE_" \]\; then' $_DEFAULT_SHELLRC_FILE_` -eq 0 ]; then
   echo "#----------------------------------------------#"  >> $_DEFAULT_SHELLRC_FILE_
   echo "# The following if statement is required by    #"  >> $_DEFAULT_SHELLRC_FILE_
   echo "# the Environment Framework. Please do not     #"  >> $_DEFAULT_SHELLRC_FILE_
   echo "# remove or modify these lines.                #"  >> $_DEFAULT_SHELLRC_FILE_
   echo "#----------------------------------------------#"  >> $_DEFAULT_SHELLRC_FILE_
   echo "if [ -f \"\$_SHELLRC_FILE_\" ]; then"              >> $_DEFAULT_SHELLRC_FILE_
   echo "  . \$_SHELLRC_FILE_"                              >> $_DEFAULT_SHELLRC_FILE_
   echo "fi"                                                >> $_DEFAULT_SHELLRC_FILE_
   echo ""                                                  >> $_DEFAULT_SHELLRC_FILE_
fi

# Initialize the $_ENV_HOME_/.bashrc and $_ENV_HOME_/.kshrc scripts.
# --------------------------------------------------------------------
rm -f $_SHELLRC_FILE_
echo "#----------------------------------------------#"  >> $_SHELLRC_FILE_
echo "# This file is generated by main.env           #"  >> $_SHELLRC_FILE_
echo "# Additions & modifications directly to this   #"  >> $_SHELLRC_FILE_
echo "# file will be overwritten upon login.         #"  >> $_SHELLRC_FILE_
echo "#----------------------------------------------#"  >> $_SHELLRC_FILE_
echo ""                                                  >> $_SHELLRC_FILE_

# Set shell alias definitions for Oracle Instances defined in oratab file.
# -------------------------------------------------------------------------
echo "# The following paragraph generated from the entries in the ALIAS file. " >> $_SHELLRC_FILE_
echo "#-----------------------------------------------------------------------" >> $_SHELLRC_FILE_

if [ -f "$_ALIAS_FILE_" ]; then
   IFS="$_NEWLINE_"
   for _LINE_ in `egrep -v  '^#|^$' $_ALIAS_FILE_`; do
      echo alias $_LINE_ >> $_SHELLRC_FILE_
   done
   echo "" >> $_SHELLRC_FILE_
   IFS="$_DEFAULT_IFS_"
fi

if [ -f "$_RC_CONFIG_FILE_" ]; then
   echo "# The following paragraph created from entries in the $_RC_CONFIG_FILE_ file. " >> $_SHELLRC_FILE_
   echo "# -----------------------------------------------------------------"            >> $_SHELLRC_FILE_
   IFS="$_NEWLINE_"
   for _LINE_ in `egrep -v  '^#|^$' $_RC_CONFIG_FILE_`; do
      echo "$_LINE_" >> $_SHELLRC_FILE_
   done
   IFS="$_DEFAULT_IFS_"
fi

echo "" >> $_SHELLRC_FILE_

# Add the 'menu' alias to the shell env file.
echo 'alias menu=". $_MAIN_ENV_"' >> $_SHELLRC_FILE_

# Source the env file (.kshrc or .bashrc depending on the shell.)
. $_SHELLRC_FILE_

# Miscelleous
# ------------
if [ -n "$ORACLE_SID" ]; then
   [ "$_SHELL_" = bash ] && export PS1="\n[`hostname|cut -f 1 -d .`:\u:${ORACLE_SID}] \`pwd\` \n> "
   [ "$_SHELL_" = ksh  ] && export PS1="$_NEWLINE_[`hostname|cut -f 1 -d .`:$LOGNAME:${ORACLE_SID}] "'$PWD'$_NEWLINE_'> '
else
   [ "$_SHELL_" = bash ] && export PS1="\n[`hostname|cut -f 1 -d .`:\u] \`pwd\` \n> "
   [ "$_SHELL_" = ksh  ] && export PS1="$_NEWLINE_[`hostname|cut -f 1 -d .`:$LOGNAME] "'$PWD'$_NEWLINE_'> '
fi

unset _WORDS_ _OHOME_ _LINE_ _SID_

# The following arrays are used to create a multi-column ORACLE_SID
# list for environments with more than 15 databases. You may adjust
# column length thresholds below. The default is up to 4 columns of
# 15 ORACLE_SID's per column. For single database environments no
# list will be printed for obvious reasons.
# ------------------------------------------------------------------
if [ "$_INTERACTIVE_" = TRUE ]; then
   typeset -i _COUNT_=0
   typeset -i _LIST1_ADDR_=0
   typeset -i _LIST2_ADDR_=0
   typeset -i _LIST3_ADDR_=0
   typeset -i _LIST4_ADDR_=0
   typeset -a _SIDLIST1_
   typeset -a _SIDLIST2_
   typeset -a _SIDLIST3_
   typeset -a _SIDLIST4_

   # Print the Welcome Banner
   # -------------------------
   clear
   echo
   _WELCOME_=' Welcome to '${_SHORT_HOSTNAME_}
   _FWINFO_="Env. Framework ${_FW_VERSION_}"
   if [ "$_SHELL_" = 'bash' ]; then
      printf "%*s\n" $(((${#_WELCOME_}+$COLUMNS)/2)) "$_WELCOME_"
      printf "%*s\n" $(((${#_FWINFO_}+$COLUMNS)/2)) "$_FWINFO_"
   else
      echo "                  $_WELCOME_"
      echo "               $_FWINFO_"
   fi
   echo

   IFS="$_NEWLINE_"
   for _SID_ in $_SID_LIST_; do
      # Find the actual database name using the RACMAP map file (ORACLE_SID : DATABASE_NAME)
      # ------------------------------------------------------------------------------------
      _SIDX_=${_SID_}X
      if [ -f "$_DBMAP_" ]; then
         _DB_UNIQUE_NAMEX_=`grep -v ^$ $_DBMAP_ | grep -v ^# | awk {' print $3 "X" '} | grep ^$_SIDX_ | cut -f2 -d: | \
           sed 's/^[ \t]*//;s/[ \t]*$//' | head -1`
      fi

      # If this is a RAC database and/or a Data Guard database then ignore
      # any matching database names or db_unique names in the oratab file
      # (usually put there by the agent)
      # -------------------------------------------------------------------
      if [ "$_SIDX_" != "$_DB_UNIQUE_NAMEX_" ]; then
         _SID_LENGTH_=${#_SID_}
         _PLUS_=`echo $_SID_ | cut -c1-1`
         if [ "$_PLUS_" = '+' ]; then
            _DISP_SID_=`echo $_SID_ | cut -c 2-$_SID_LENGTH_`
         else
            _DISP_SID_=$_SID_
         fi
         alias $_DISP_SID_=". $_MAIN_ENV_ $_SID_"
         echo "alias $_DISP_SID_='. $_MAIN_ENV_ $_SID_'" >> $_SHELLRC_FILE_

         _COUNT_=$_COUNT_+1
         if [ "$_COUNT_" -le 15 ]; then              # <-- Column length is 15. You can adjust this here.
            _LIST1_ADDR_=$_LIST1_ADDR_+1
            _SIDLIST1_[$_LIST1_ADDR_]=$_DISP_SID_
            continue
         fi
         if [ "$_COUNT_" -le 30 ]; then              # <-- Column length is 15. You can adjust this here.
            _LIST2_ADDR_=$_LIST2_ADDR_+1
            _SIDLIST2_[$_LIST2_ADDR_]=$_DISP_SID_
            continue
         fi
         if [ "$_COUNT_" -le 45 ]; then              # <-- Column length is 15. You can adjust this here.
            _LIST3_ADDR_=$_LIST3_ADDR_+1
            _SIDLIST3_[$_LIST3_ADDR_]=$_DISP_SID_
            continue
         fi
         if [ "$_COUNT_" -le 60 ]; then              # <-- Column length is 15. You can adjust this here.
            _LIST4_ADDR_=$_LIST4_ADDR_+1
            _SIDLIST4_[$_LIST4_ADDR_]=$_DISP_SID_
            continue
         fi
      fi
   done

   # Print the menu
   if [ "`echo "$_SID_LIST_" | wc -w`" -gt 1 ]; then
      echo "   Available database environments:"
      echo
      typeset -i _i_=0
      while [ $_i_ -lt 16 ]; do
        _i_=$_i_+1

        if [ "${_SIDLIST1_[$_i_]}" != '' ]; then
          [ "${_SIDLIST1_[$_i_]}" == '' ] && _SEP1_=' ' || _SEP1_='-'
          [ "${_SIDLIST2_[$_i_]}" == '' ] && _SEP2_=' ' || _SEP2_='-'
          [ "${_SIDLIST3_[$_i_]}" == '' ] && _SEP3_=' ' || _SEP3_='-'
          [ "${_SIDLIST4_[$_i_]}" == '' ] && _SEP4_=' ' || _SEP4_='-'
          printf "%6s %-15s %2s %-15s %2s %-15s %2s %-15s\n" $_SEP1_ ${_SIDLIST1_[$_i_]} $_SEP2_ ${_SIDLIST2_[$_i_]} $_SEP3_ ${_SIDLIST3_[$_i_]} $_SEP4_ ${_SIDLIST4_[$_i_]}
        fi
      done

      echo
      printf "   Enter a selection from the list above to change your environment.\n"
      printf "   Current Environment: $ORACLE_SID\n"
   fi
fi

# Create a special alias that displays the menu of databases.
# ------------------------------------------------------------
alias menu=". $_MAIN_ENV_"

# The following allows support for EBusiness Databases. These
# databases have a special environment file that must be sourced
# to properly set the environment. Any settings in this script
# overwrite settings made in the main.env script. Therefore this
# must be the last set of environment settings to be configured.
# -----------------------------------------------------------------
_APPS_ENV_FILE_=${ORACLE_HOME}/${ORACLE_SID}_${_SHORT_HOSTNAME_}.env
if [ -f "$_APPS_ENV_FILE_" ]; then
  . $_APPS_ENV_FILE_
else
  unset _APPS_ENV_FILE_
fi

# Print out any warning messages
# --------------------------------
if [ -n "$_WARNING_" -a "$_WARNINGS_ON_" = TRUE ]; then
   echo
   echo "--------------- W A R N I N G -------------------------------------------------"
   printf "$_WARNING_\n"
   echo "--------------- W A R N I N G -------------------------------------------------"
fi

# Call the jobs command to flush jobs completion messages.
# Background jobs get created for some reason when alias is called to set the database aliases.
# The jobs are always complete but need to be queried using jobs before the status is released.
# -----------------------------------------------------------------------------------------------
jobs >/dev/null

# Cleanup temporary and work variables:
#  Some working variables used by this script are not unset for the convenience of the user.
#  They are useful for scripting and reference outside the scope of this script. The following
#  list of variables are not unset:
#
#  _ALERT_LOG_
#  _DGB_LOG_
#  _BACKGROUND_DUMP_DEST_
#  _CORE_DUMP_DEST_
#  _DB_UNIQUE_NAME_
#  _HOSTIP_
#  _HOSTNAME_
#  _INTERACTIVE_
#  _LC_DB_UNIQUE_NAME_
#  _LOCAL_BIN_
#  _MAIN_ENV_
#  _ORATAB_
#  _ORA_VERSION_
#  _SYSTEM_TYPE_
#  _USER_DUMP_DEST_

# The variables below are needed by this script and are unset here.
# ------------------------------------------------------------------
unset _PLUS_ _SID_LENGTH_ _SID_LIST_ _DEFAULT_IFS_ _CLASSPATH_FILE_ _CUSTOM_FILE_ _DIR_ _DISP_SID_
unset _LD_LIBRARY_PATH_FILE_ _LIBPATH_FILE_ _PATH_FILE_ _DEFAULT_SHELLRC_FILE_
unset _PERL5LIB_FILE_ _PERSONAL_PATH_ _RC_CONFIG_FILE_ _SIDX_ _PERSONAL_PATH_CANDIDATES_
unset _DBMAP_ _WARNINGS_ON_ _ORACLE_PATH_FILE_ _ORACLE_PATH_ _NEWLINE_ _FWINFO_ _WELCOME_ _PERSONAL_DIR_LIST_
unset _COUNT_ _LIST1_ADDR_ _LIST2_ADDR_ _LIST3_ADDR_ _LIST4_ADDR_ _SIDLIST1_ _SIDLIST2_ _SIDLIST3_ _SIDLIST4_

